/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * gupnp
 * Copyright (C) Unknown 2013 <alex@gentooS>
	 *
 * gupnp is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
	 *
 * gupnp is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <sys/socket.h>
#include <netdb.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>

#include <upnp/upnp.h>
#include <upnp/upnptools.h>
#include <upnp/ixml.h>

#include <iostream>
#include <sstream>

#include "device.h"
#include "xmltools.h"
#include "include/Uri.h"

Device::Device( )
{
}

Device::~Device()
{
    services.clear();
}

Device::Device( const Upnp_Discovery* d )
{
    _DeviceId = d->DeviceId;
    _DeviceType = d->DeviceType;
    _ServiceType = d->ServiceType;
    _ServiceVer = d->ServiceVer;
    _Location = d->Location;
    _Os = d->Os;

    char buffer[INET6_ADDRSTRLEN];
    getnameinfo((struct sockaddr*)&d->DestAddr, sizeof(d->DestAddr), buffer, sizeof(buffer), 0, 0, NI_NUMERICHOST);
    _IP = buffer;
    _Time = time(NULL);

    Uri u = Uri::Parse(_Location);
    _baseURL = u.Protocol+"://"+u.Host+":"+u.Port;

    //fetchInfo();
    /*
     if( Service::isLeagal(_DeviceType.c_str()) )
     {
     }*/
}

void  Device::upnpEventReceived( Upnp_Event* )
{
    std::cerr<<"Device::upnpEventReceived( Upnp_Event* )"<<std::endl;
}

void Device::fetchInfo(void)
{
    std::cerr<<"fetchInfo:\t"<<_DeviceId<<" url:\t"<<_Location<<std::endl;
    IXML_Document *doc = 0;
    int res;
    res = UpnpDownloadXmlDoc( _Location.c_str(), &doc );
    if ( res != UPNP_E_SUCCESS )
    {
        std::cerr<<"error: UpnpDownloadXmlDoc:  "<<__FILE__<< __LINE__<<std::endl;
        return;
    }
    std::cerr<<": ok "<<std::endl;
    // Try to extract baseURL
    /*
    IXML_NodeList* urlList = ixmlDocument_getElementsByTagName( doc, "baseURL" );
    if ( urlList )
    {
        if ( IXML_Node* urlNode = ixmlNodeList_item( urlList, 0 ) )
        {
            IXML_Node* textNode = ixmlNode_getFirstChild( urlNode );
            if ( textNode ) _baseURL = ixmlNode_getNodeValue( textNode );
        }
        ixmlNodeList_free( urlList );
    }
    */
    // Get devices
    IXML_NodeList* deviceList = ixmlDocument_getElementsByTagName( doc, "device" );
    if ( deviceList )
    {
        for ( unsigned int i = 0; i < ixmlNodeList_length( deviceList ); i++ )
        {
            IXML_Element* deviceElement = ( IXML_Element* )ixmlNodeList_item( deviceList, i );

            _deviceType = xml_getChildElementValue( deviceElement, "deviceType");
#ifdef DEBUG
            if ( _deviceType.empty() )
            {
            	std::cerr<<"error: no deviceType! "<<__FILE__<< __LINE__<<std::endl;
            }
#endif

            _UDN = xml_getChildElementValue( deviceElement, "UDN" );
#ifdef DEBUG
            if ( _UDN.empty() )
            {
            	std::cerr<<"error: no UDN! "<<__FILE__<< __LINE__<<std::endl;
            }
#endif

            _friendlyName = xml_getChildElementValue( deviceElement, "friendlyName" );
#ifdef DEBUG
            if ( _friendlyName.empty() )
            {
            	std::cerr<<"error: no friendlyName! "<<__FILE__<< __LINE__<<std::endl;
            }
#endif
            IXML_NodeList* serviceList = ixmlElement_getElementsByTagName( deviceElement, "service" );
            if ( serviceList )
            {
                for ( unsigned int j = 0; j < ixmlNodeList_length( serviceList ); j++ )
                {
                    std::cerr<<"\nadd service: "<<std::endl;
                    IXML_Element* serviceElement = ( IXML_Element* )ixmlNodeList_item( serviceList, j );
                    Service *s = new Service(serviceElement, _baseURL.c_str());

                    services.insert ( std::pair<ServiceType,Service*>(s->serviceType,s) );
                    //services.push_back( new Service(serviceElement) );
                    std::cerr<<" type: "<< s->serviceType;
                }
                std::cerr<<std::endl;
            }
        }
        ixmlNodeList_free( deviceList );
    }
}

const char* Device::getId() const
{
    const char* s = _DeviceId.c_str();
    return s;
}

const char * Device::getfriendlyName(void)
{
    const char* s = _friendlyName.c_str();
    return s;
}

const char* Device::getServiceType(void)
{
    const char* s = _ServiceType.c_str();
    return s;
}

ServiceType Device::getType(void)
{
    for ( auto it=services.begin(); it!=services.end(); ++it)
    {
        Service* s= (*it).second;

        if( s != 0  && (s->serviceType == AVTransport
						|| s->serviceType == ContentDirectory
						|| s->serviceType == RenderingControl))
        {
            return s->serviceType;
        }
    }
    return Unknown;
}

Service* Device::getService(ServiceType st)
{
    return services[st];
}

void Device::servicesLoad(const std::map<ServiceType,Service*> srv)
{
    for ( auto it=srv.begin(); it!=srv.end(); ++it)
    {
        services.insert ( std::pair<ServiceType,Service*>((*it).first,(*it).second) );
    }
}

void Device::addService(Service *s)
{
    services.insert ( std::pair<ServiceType,Service*>(s->serviceType,s) );
}

bool Device::getServicebySid(const char* sid)
{
    for ( auto it=services.begin(); it!=services.end(); ++it)
    {
    	Service* s = (*it).second;
		return *s  == sid;
    }
    return false;
}

bool Device::compareId( const char* id )
{
    return ( strncmp( getId(), id, sizeof( Upnp_SID ) ) == 0 );
}

bool Device::compareDev( Device* d )
{
    return ( _DeviceId == d->getId() );
}

bool Device::comparefriendlyName( const char* name)
{
    return ( strncmp( getfriendlyName(), name,  strlen(name)) == 0 );
}

std::string Device::getDevInfo(void)
{
    return "DeviceId:\t" + _DeviceId
           +"\nDeviceType:\t"+_DeviceType
           +"\nServiceType:\t"+_ServiceType
           +"\nServiceVer:\t"+_ServiceVer
           +"\nLocation:\t"+_Location
           +"\nOs:\t"+_Os
           +"\nIp:\t"+_IP
           //+"\nDate:\t"+ctime(&_Time)
           +"\nbaseURL:\t"+_baseURL
           +"\ndeviceType:\t"+_deviceType
           +"\nUDN:\t"+_UDN
           +"\nfriendlyName:\t"+_friendlyName+"\n";
}

bool Device::fetchContents(void)
{
    return true;
}

IXML_Node* Device::setVal(std::string name, std::string val, IXML_Document* doc)
{
    IXML_Element *el = ixmlDocument_createElement(doc, name.c_str());
    IXML_Element *v = ixmlDocument_createElement(doc, val.c_str());
    (&v->n)->nodeType = eTEXT_NODE;
    ixmlNode_setNodeValue(&v->n,val.c_str());
    ixmlNode_appendChild( &el->n, &v->n );
    return &el->n;
}

IXML_Node* Device::Dev2Xml( IXML_Document* doc )
{

    std::cerr<<"id: "<<_DeviceId<<std::endl;
    IXML_Element *dev = ixmlDocument_createElement(doc, "dev");

    ixmlNode_appendChild( &dev->n, setVal("DeviceId",  _DeviceId, doc));
    ixmlNode_appendChild( &dev->n, setVal("DeviceType",  _DeviceType, doc));
    ixmlNode_appendChild( &dev->n, setVal("ServiceType",  _ServiceType, doc));
    ixmlNode_appendChild( &dev->n, setVal("ServiceVer",  _ServiceVer, doc));
    ixmlNode_appendChild( &dev->n, setVal("Location",  _Location, doc));
    ixmlNode_appendChild( &dev->n, setVal("Os",  _Os, doc));
    ixmlNode_appendChild( &dev->n, setVal("IP",  _IP, doc));
    ixmlNode_appendChild( &dev->n, setVal("baseURL",  _baseURL, doc));
    ixmlNode_appendChild( &dev->n, setVal("deviceType",  _deviceType, doc));
    ixmlNode_appendChild( &dev->n, setVal("UDN",  _UDN, doc));
    ixmlNode_appendChild( &dev->n, setVal("friendlyName",  _friendlyName, doc));


    IXML_Element *Services = ixmlDocument_createElement(doc, "Services");

    for ( auto it=services.begin(); it!=services.end(); ++it)
    {
        Service* s= (*it).second;
        if( s != 0  && (s->serviceType == AVTransport ||
                        s->serviceType == RenderingControl ||
                        s->serviceType == ContentDirectory ) )
        {

            IXML_Element *srv = ixmlDocument_createElement(doc, "Service");

            std::stringstream str;
            str << s->serviceType;
            ixmlNode_appendChild( &srv->n, setVal("Type",  str.str(), doc));
            ixmlNode_appendChild( &srv->n, setVal("SCPDUrl",  s->SCPDUrl, doc));
            ixmlNode_appendChild( &srv->n, setVal("serviceTypeUrn",  s->serviceTypeUrn, doc));
            ixmlNode_appendChild( &srv->n, setVal("eventSubURL",  s->eventSubURL, doc));
            ixmlNode_appendChild( &srv->n, setVal("controlURL",  s->controlURL, doc));

            ixmlNode_appendChild( &Services->n, &srv->n);
        }
    }

    ixmlNode_appendChild( &dev->n, &Services->n);

    return &dev->n;
}

IXML_Document *Device::SendAction( ServiceType stype, const char* _actionName, int count, ...)
{
    int ret, n;
    va_list va;
    IXML_Document *action = NULL, *response = NULL;
    char* actionName = strdup( _actionName );
    char* url = strdup( services[stype]->controlURL.c_str() );
    char* urn = strdup( services[stype]->serviceTypeUrn.c_str() );

    // Create action
    action = UpnpMakeAction(actionName, urn, 0, NULL);

    // Add argument to action
    va_start(va, count);
    for (n = 0; n < count; n++)
    {
        char *arg_name, *arg_val;
        arg_name = va_arg(va, char*);
        arg_val  = va_arg(va, char*);
        //std::cerr << arg_name<< " : " << arg_val<<"\n";
        ret = UpnpAddToAction(&action, actionName, urn, arg_name, arg_val);
        if ( ret != UPNP_E_SUCCESS )
        {
            fprintf(stderr,"Unable add to action: %s (%s)\n", arg_name, arg_val);
        }
    }
    va_end(va);

    // Send action
    ret = UpnpSendAction(ctrlPnt, url, urn, 0, action, &response);

    // Free action
    if (action)   ixmlDocument_free(action);

    if (ret != UPNP_E_SUCCESS)
    {
        std::cerr << "Unable to send action: "<< ret <<" "<< UpnpGetErrorMessage(ret)<<"\nAction: "<< actionName <<"\nurl: "<< url << "\nDevUDN: "<<urn<<std::endl;
        if (response) ixmlDocument_free(response);
        return NULL;
    }
    /*
    else
    {
        std::cerr << " ok";
    }
    std::cerr << std::endl;*/
    if(actionName) free(actionName);
    if(url) free(url);
    if(urn) free(urn);

    return response;
}

bool Device::Subscribe(ServiceType stype, int timeOut = 20)
{
	Service* srv = services[stype];

    int ret = UpnpSubscribe( ctrlPnt, srv->eventSubURL.c_str(),  &timeOut,   srv->Sid);
    if (ret != UPNP_E_SUCCESS)
    {
        std::cerr<<"\nerror UpnpSubscribe to :"<<_DeviceId<<" url: "<<srv->eventSubURL.c_str()<<std::endl;
        return false;
    }
    else
    {
    	services[ContentDirectory] = srv;
        std::cerr<<"\nUpnpSubscribe to: "<<_DeviceId<<" url: "<<srv->eventSubURL.c_str()<<std::endl;
    }
    return true;
}

bool Device::UnSubscribe(ServiceType stype)
{
	Service* s = getService(stype);
    int ret = UpnpUnSubscribe( ctrlPnt, s->Sid);
    if (ret != UPNP_E_SUCCESS)
    {
        std::cerr<<"\nerror UpnpSubscribe to :"<<_DeviceId<<std::endl;
        return false;
    }
    else
    {
        std::cerr<<"\nUpnpSubscribe to: "<<_DeviceId<<std::endl;
    }
    return true;
}

DOMString Device::getSrvVar( ServiceType stype, std::string varName)
{
    Service *s = getService(stype);
    if( s == 0 )
    {
        fprintf(stderr, "service: %d not found\n", stype);
        return 0;
    }

    int ret;
    DOMString response;
    ret = UpnpGetServiceVarStatus( ctrlPnt,   s->controlURL.c_str(),   varName.c_str(),  &response );
    if (ret != UPNP_E_SUCCESS)
    {
        std::cerr<<"Unable get var: "<< varName<<" return: "<< ret<<" ("<<UpnpGetErrorMessage(ret)<<")\nsrv id: "<<srvId<<"\ncontrol url: "<<s->controlURL<<std::endl;
        return NULL;
    }
    return response;
}
