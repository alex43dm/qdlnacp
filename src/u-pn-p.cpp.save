/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 * gupnp
 * Copyright (C) Unknown 2013 <alex@gentooS>
	 *
 * gupnp is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
	 *
 * gupnp is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
//#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>
#include <string.h>
#include <iostream>

#include "u-pn-p.h"
#include "device-list.h"
#include "xmltools.h"
#include "UPnP_MediaRenderer.h"
#include "UPnP_MediaRenderer.h"
#include "UPnP_MediaServer.h"

UPnP::UPnP()
{
    initialize();
}

UPnP::~UPnP()
{
    UpnpFinish();
}

void UPnP::initialize()
{
    int res;
    res = UpnpInit( 0, 0 );
    if( res != UPNP_E_SUCCESS )
    {
        std::cerr<< "UpnpInit error: " << UpnpGetErrorMessage( res )  <<std::endl;
        return;
    }

    res = UpnpRegisterClient(Callback, this, &CtrlPnt);
    if( res != UPNP_E_SUCCESS )
    {
        std::cerr<< "UpnpRegisterClient error: " << UpnpGetErrorMessage( res )  <<std::endl;
    }

    deviceList = new DeviceList();
    cfg = new Config("config.xml", &deviceList, CtrlPnt);

    res = UpnpSetMaxContentLength( atoi(cfg->UpnpMaxContentLength.c_str()) );
    if( res != UPNP_E_SUCCESS )
    {
        std::cerr<< "UpnpSetMaxContentLength error: " << UpnpGetErrorMessage( res )  <<std::endl;
    }

}

bool UPnP::SaveConfig()
{
    return cfg->SaveFile(deviceList);
}

int UPnP::Callback( Upnp_EventType eventType, void* event, void* pCookie )
{
    UPnP *c = (UPnP *)pCookie;

    switch( eventType )
    {
    case UPNP_DISCOVERY_ADVERTISEMENT_ALIVE:
    case UPNP_DISCOVERY_SEARCH_RESULT:
    {
        Upnp_Discovery* e = (struct Upnp_Discovery*)event;
        std::cerr<<"UPNP_DISCOVERY_SEARCH_RESULT"
        <<"\nId:\t"<<e->DeviceId
        <<"\nType\t"<<e->DeviceType
        <<"\nServiceType"<<e->ServiceType
        <<"\nVer:\t"<<e->ServiceVer
        <<"\nLocation:\t"<< e->Location
        <<std::endl;

        if( !c->deviceList->isDeviceByID(e->DeviceId) )
        {
            Device *d = new Device(e);
            d->ctrlPnt = c->CtrlPnt;
				switch(d->getType())
				{
				case AVTransport:
				{
					UPnP_MediaRenderer* m = new UPnP_MediaRenderer(d);
					delete d;
					c->deviceList->addDevice(m, false);
				}
				break;

				case ContentDirectory:
				{
					UPnP_MediaServer* m = new UPnP_MediaServer(d);
					delete d;
					c->deviceList->addDevice(m, false);
				}
				break;

				default:
				{
					c->deviceList->addDevice(d, false);
					break;
				}
				}

            std::cerr<<"create device"<<std::endl;
        }
    }
    break;

    case UPNP_DISCOVERY_ADVERTISEMENT_BYEBYE:
    {
        fprintf( stderr,"get: UPNP_DISCOVERY_ADVERTISEMENT_BYEBYE\n");
        //struct Upnp_Discovery* discovery = ( struct Upnp_Discovery* )event;
        //dl->deviceList->removeDevice( discovery->DeviceId );
    }
    break;

    case UPNP_EVENT_RECEIVED:
    {
        Upnp_Event* e = ( Upnp_Event* )event;
        //std::cerr<<"Callback  get: UPNP_EVENT_RECEIVED"<<std::endl;
        std::cerr<<"Sid: "<< e->Sid << " EventKey: "<< e->EventKey <<" ChangedVariables "<<  ixmlDocumenttoString(e->ChangedVariables) <<std::endl;
        if(c->deviceList)
        {
            Device* device = c->deviceList->getDeviceBySid( e->Sid );
            if(device)
			{
				device->upnpEventReceived (e);
			}
        }
    }
    break;

    case UPNP_EVENT_AUTORENEWAL_FAILED:
    case UPNP_EVENT_SUBSCRIPTION_EXPIRED:
    {
        Upnp_Event_Subscribe* e = ( Upnp_Event_Subscribe* )event;
        std::cerr<<"Callback  get: UPNP_EVENT_SUBSCRIPTION_EXPIRED sid:"<<e->Sid<<std::endl;
/*        if(c->deviceList)
        {
            Device* device = c->deviceList->getDeviceBySid( e->Sid );
        }*/

    }
    break;

    default:
        fprintf( stderr,"%s:%d: DEBUG: UNHANDLED EVENT ( TYPE=%d )\n", __FILE__, __LINE__, eventType );
        break;
    }

    return UPNP_E_SUCCESS;
}


const char* ALL_DEVICE_TYPES = "upnp:rootdevice";
const char* MEDIASERVERS = "urn:schemas-upnp-org:device:MediaServer:1";
const char* MEDIARENDERERS = "urn:schemas-upnp-org:device:MediaRenderer:1";
//const char* CONTENT_DIRECTORY_SERVICE_TYPE = "urn:schemas-upnp-org:service:ContentDirectory:1";

std::string UPnP::NetScan(int waitSec)
{
    int res;

    res = UpnpSearchAsync( CtrlPnt, waitSec, MEDIASERVERS, this );
    if( res != UPNP_E_SUCCESS )
    {
        std::cerr<<"UpnpSearchAsync error: "<<UpnpGetErrorMessage( res )<<std::endl;
    }

    res = UpnpSearchAsync( CtrlPnt, waitSec, MEDIARENDERERS, this );
    if( res != UPNP_E_SUCCESS )
    {
        std::cerr<<"UpnpSearchAsync error: "<<UpnpGetErrorMessage( res )<<std::endl;
    }
    //wait
    sleep(waitSec);

    return cfg->GetXml(deviceList);

    /*
        res = UpnpSearchAsync( CtrlPnt, waitSec, ALL_DEVICE_TYPES, this );
        if( res != UPNP_E_SUCCESS )
        {
            std::cerr<<"UpnpSearchAsync error: "<<UpnpGetErrorMessage( res )<<std::endl;
        }
            return deviceList;

        */
}

DOMString UPnP::getSrvVar( std::string srvId, ServiceType stype, std::string varName)
{
    Device* d = deviceList->getDevice( srvId );
    if( d == 0 )
    {
        fprintf(stderr, "device: %s not found\n", srvId.c_str());
        return 0;
    }

    Service *s = d->getService(stype);
    if( s == 0 )
    {
        fprintf(stderr, "service: %d not found\n", stype);
        return 0;
    }

    int ret;
    DOMString response;
    ret = UpnpGetServiceVarStatus( CtrlPnt,   s->controlURL.c_str(),   varName.c_str(),  &response );
    if (ret != UPNP_E_SUCCESS)
    {
        std::cerr<<"Unable get var: "<< varName<<" return: "<< ret<<" ("<<UpnpGetErrorMessage(ret)<<")\nsrv id: "<<srvId<<"\ncontrol url: "<<s->controlURL<<std::endl;
        return NULL;
    }
    return response;
}

IXML_Document *UPnP::SendAction( const char* _url ,  const char* _urn , const char* _actionName, int count, ...)
{
    int ret, n;
    va_list va;
    IXML_Document *action = NULL, *response = NULL;
    char* actionName = strdup( _actionName );
    char* url = strdup( _url );
    char* urn = strdup( _urn );


    // Create action
    action = UpnpMakeAction(actionName, urn, 0, NULL);

    // Add argument to action
    va_start(va, count);
    for (n = 0; n < count; n++)
    {
        char *arg_name, *arg_val;
        arg_name = va_arg(va, char*);
        arg_val  = va_arg(va, char*);
        //std::cerr << arg_name<< " : " << arg_val<<"\n";
        ret = UpnpAddToAction(&action, actionName, urn, arg_name, arg_val);
        if ( ret != UPNP_E_SUCCESS )
        {
            fprintf(stderr,"Unable add to action: %s (%s)\n", arg_name, arg_val);
        }
    }
    va_end(va);

    // Send action
    ret = UpnpSendAction(CtrlPnt, url, urn, 0, action, &response);

    // Free action
    if (action)   ixmlDocument_free(action);

    if (ret != UPNP_E_SUCCESS)
    {
        std::cerr << "Unable to send action: "<< ret <<" "<< UpnpGetErrorMessage(ret)<<"\nAction: "<< actionName <<"\nurl: "<< url << "\nDevUDN: "<<urn<<std::endl;
        if (response) ixmlDocument_free(response);
        return NULL;
    }
    /*
    else
    {
        std::cerr << " ok";
    }
    std::cerr << std::endl;*/
    if(actionName) free(actionName);
    if(url) free(url);
    if(urn) free(urn);

    return response;
}
/*
void UPnP::subscribe(std::string id)
{
    Device* d = deviceList->getDeviceByID(id.c_str());
    if( d == 0 )
    {
        std::cerr<<"\ndevice: "<<id<<" not found\n";
        return;
    }
    d->subscribeToContentDirectory(CtrlPnt);
}
*/
